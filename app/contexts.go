// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "fs": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/sky0621/try-goa/fs
// --out=$(GOPATH)\src\github.com\sky0621\try-goa
// --version=v1.3.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// ShowMovieContext provides the movie show action context.
type ShowMovieContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	MovieID int
}

// NewShowMovieContext parses the incoming request URL and body, performs validations and creates the
// context used by the movie controller show action.
func NewShowMovieContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowMovieContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowMovieContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramMovieID := req.Params["movieId"]
	if len(paramMovieID) > 0 {
		rawMovieID := paramMovieID[0]
		if movieID, err2 := strconv.Atoi(rawMovieID); err2 == nil {
			rctx.MovieID = movieID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("movieId", rawMovieID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowMovieContext) OK(r *Movie) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.movie+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowMovieContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
